
Метод создания случайного интового массива
// int[] CreateArrayRndInt (int size, int min, int max)
// {
//     int[] array = new int[size];
//     Random rnd = new Random();
//     for (int i = 0; i < array.Length; i++)
//     {
//         array[i] = rnd.Next(min, max + 1);
//     }
//     return array;
// }

метод вывода на печать массива
// void PrintArray (int[] array)
// {
//     Console.Write("[");
//     for (int i = 0; i < array.Length; i++)
//     {
//         if (i < array.Length - 1) Console.Write($"{array[i]}, ");
//         else Console.Write($"{array[i]}");
//     }
//     Console.Write("]");
// }

метод замены положительных значений на отрицательные и наоборот

// int[] Inverse(int[] array)
// {
//     for(int i = 0; i < array.Length; i++)
//     {
//         array[i] = array[i] * (-1);
//     }
//     return array;
// }

Метод подсчета положительный и отрицательных значений массива
// int[] GetSumPosNegElem(int[] array)
// {
//     int sumNeg = 0;
//     int sumPos = 0;
//     for (int i = 0; i < array.Length; i++)
//     {
//         if (array[i] < 0) sumNeg += array[i];
//         else sumPos += array[i];
//     }
//     return new int[]{sumNeg, sumPos};
// }

метод считает сумму значений у не четных индексов.//1,3,5 ....
// int GetSumPosOddInd(int[] array)
// {
//     int sumPos = 0;
//     for (int i = 1; i < array.Length; i += 2)
//     {
//         sumPos += array[i];
//     }
//     return sumPos;
// }

метод определяет, присутствует ли заданное число в массиве.
// bool ArraySearch(int[] array, int search1)
// {
//     bool exist = false;
//     for (int i = 0; i < array.Length; i++)
//     {
//         if (array[i] == search1)
//         {
//             exist = true;
//             break;
//         }

//     }
//     return exist;
// }

метод который ищет числа в указанном диапазоне и  выводит количество совпадений чисел из указаного диапазона// (задача 35)
// int ArraySearch(int[] array)
// {
//     int count = 0;
//     for (int i = 0; i < array.Length; i++)
//     {
//         if (array[i] >= 10 && array[i] <= 99)
//             count++;
//     }
//     return count;
// }

Показывает количество четных чисел в массиве
// int ArraySearchEven(int[] array)
// {
//     int count = 0;
//     for (int i = 0; i < array.Length; i++)
//     {
//         if (array[i] %2 ==0)
//             count++;
//     }
//     return count;
// }

Произведение пар чисел в одномерном массиве Парой считаем первый и последний элемент, второй и предпоследний
и т.д. //задача 37
// int[] ProductPairsDigit(int[] array)
// {
//     int size = array.Length / 2;
//     if (array.Length % 2 != 0) size += 1;
//     int[] newArray = new int[size];



//     for (int i = 0; i < array.Length / 2; i++)
//     {
//         newArray[i] = array[i] * array[array.Length - 1 - i];
//     }

//     if (newArray.Length % 2 != 0) newArray[newArray.Length - 1] = array[array.Length / 2];
//     return newArray;
// } 

шаблон вывода результатов
// вывод результатов:
// PrintArray(arr); //печать массива
// Console.WriteLine(); // перевод курсора на следующую строку
// int[] result = GetSumPosNegElem(arr); //присовение методу переменной резалт
// Console.WriteLine($"Сумма отрицательных числе равна {result[0]}, сумма положительных числе равна {result[1]}"); //вывод решения